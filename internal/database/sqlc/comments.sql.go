// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, user_id, content)
VALUES ($1, $2, $3)
RETURNING id, post_id, user_id, content, created_at
`

type CreateCommentParams struct {
	PostID  int32  `json:"post_id"`
	UserID  int32  `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsByPost = `-- name: ListCommentsByPost :many
SELECT c.id, c.post_id, c.user_id, c.content, c.created_at, u.username
FROM comments c
JOIN users u ON c.user_id = u.id
WHERE c.post_id = $1
ORDER BY c.created_at ASC
`

type ListCommentsByPostRow struct {
	ID        int32        `json:"id"`
	PostID    int32        `json:"post_id"`
	UserID    int32        `json:"user_id"`
	Content   string       `json:"content"`
	CreatedAt sql.NullTime `json:"created_at"`
	Username  string       `json:"username"`
}

func (q *Queries) ListCommentsByPost(ctx context.Context, postID int32) ([]ListCommentsByPostRow, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCommentsByPostRow
	for rows.Next() {
		var i ListCommentsByPostRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
